/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ebp_proto_TYPES_H
#define ebp_proto_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>





typedef struct _applist__isset {
  _applist__isset() : comment(false) {}
  bool comment;
} _applist__isset;

class applist {
 public:

  static const char* ascii_fingerprint; // = "F4A50F0EC638C7F66026F9B6678FD89B";
  static const uint8_t binary_fingerprint[16]; // = {0xF4,0xA5,0x0F,0x0E,0xC6,0x38,0xC7,0xF6,0x60,0x26,0xF9,0xB6,0x67,0x8F,0xD8,0x9B};

  applist() : name(), command(), comment() {
  }

  virtual ~applist() throw() {}

  std::string name;
  std::string command;
  std::string comment;

  _applist__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_command(const std::string& val) {
    command = val;
  }

  void __set_comment(const std::string& val) {
    comment = val;
    __isset.comment = true;
  }

  bool operator == (const applist & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(command == rhs.command))
      return false;
    if (__isset.comment != rhs.__isset.comment)
      return false;
    else if (__isset.comment && !(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const applist &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const applist & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(applist &a, applist &b);

typedef struct _applistfailure__isset {
  _applistfailure__isset() : failmsg(false) {}
  bool failmsg;
} _applistfailure__isset;

class applistfailure : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  applistfailure() : failmsg() {
  }

  virtual ~applistfailure() throw() {}

  std::string failmsg;

  _applistfailure__isset __isset;

  void __set_failmsg(const std::string& val) {
    failmsg = val;
  }

  bool operator == (const applistfailure & rhs) const
  {
    if (!(failmsg == rhs.failmsg))
      return false;
    return true;
  }
  bool operator != (const applistfailure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const applistfailure & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(applistfailure &a, applistfailure &b);



#endif
